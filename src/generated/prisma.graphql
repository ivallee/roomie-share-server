# THIS FILE HAS BEEN AUTO-GENERATED BY "PRISMA DEPLOY"
# DO NOT EDIT THIS FILE DIRECTLY

#
# Model Types
#

type Expense implements Node {
  id: ID!
  amount: Int!
  description: String!
  paidBy(where: UserWhereInput): User!
  participants(where: Expense_ShareWhereInput, orderBy: Expense_ShareOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Expense_Share!]
  group(where: GroupWhereInput): Group!
  perPerson: Int!
}

type Group implements Node {
  id: ID!
  name: String!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  createdBy(where: UserWhereInput): User!
  expenses(where: ExpenseWhereInput, orderBy: ExpenseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Expense!]
}

type User implements Node {
  id: ID!
  name: String!
  email: String!
  password: String!
  groups(where: GroupWhereInput, orderBy: GroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Group!]
  groupsCreated(where: GroupWhereInput, orderBy: GroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Group!]
  expensesPaid(where: ExpenseWhereInput, orderBy: ExpenseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Expense!]
  expensesShared(where: Expense_ShareWhereInput, orderBy: Expense_ShareOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Expense_Share!]
}


#
# Other Types
#

type AggregateExpense {
  count: Int!
}

type AggregateExpense_Share {
  count: Int!
}

type AggregateGroup {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Expense_Share {
  user(where: UserWhereInput): User!
  expense(where: ExpenseWhereInput): Expense!
  share: Float!
}

type Expense_ShareConnection {
  pageInfo: PageInfo!
  edges: [Expense_ShareEdge]!
  aggregate: AggregateExpense_Share!
}

input Expense_ShareCreateInput {
  share: Float!
  user: UserCreateOneWithoutExpensesSharedInput!
  expense: ExpenseCreateOneWithoutParticipantsInput!
}

input Expense_ShareCreateManyWithoutExpenseInput {
  create: [Expense_ShareCreateWithoutExpenseInput!]
}

input Expense_ShareCreateManyWithoutUserInput {
  create: [Expense_ShareCreateWithoutUserInput!]
}

input Expense_ShareCreateWithoutExpenseInput {
  share: Float!
  user: UserCreateOneWithoutExpensesSharedInput!
}

input Expense_ShareCreateWithoutUserInput {
  share: Float!
  expense: ExpenseCreateOneWithoutParticipantsInput!
}

type Expense_ShareEdge {
  node: Expense_Share!
  cursor: String!
}

enum Expense_ShareOrderByInput {
  share_ASC
  share_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type Expense_SharePreviousValues {
  share: Float!
}

type Expense_ShareSubscriptionPayload {
  mutation: MutationType!
  node: Expense_Share
  updatedFields: [String!]
  previousValues: Expense_SharePreviousValues
}

input Expense_ShareSubscriptionWhereInput {
  AND: [Expense_ShareSubscriptionWhereInput!]
  OR: [Expense_ShareSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: Expense_ShareWhereInput
}

input Expense_ShareUpdateInput {
  share: Float
  user: UserUpdateOneWithoutExpensesSharedInput
  expense: ExpenseUpdateOneWithoutParticipantsInput
}

input Expense_ShareUpdateManyWithoutExpenseInput {
  create: [Expense_ShareCreateWithoutExpenseInput!]
}

input Expense_ShareUpdateManyWithoutUserInput {
  create: [Expense_ShareCreateWithoutUserInput!]
}

input Expense_ShareWhereInput {
  AND: [Expense_ShareWhereInput!]
  OR: [Expense_ShareWhereInput!]
  share: Float
  share_not: Float
  share_in: [Float!]
  share_not_in: [Float!]
  share_lt: Float
  share_lte: Float
  share_gt: Float
  share_gte: Float
  user: UserWhereInput
  expense: ExpenseWhereInput
}

type ExpenseConnection {
  pageInfo: PageInfo!
  edges: [ExpenseEdge]!
  aggregate: AggregateExpense!
}

input ExpenseCreateInput {
  amount: Int!
  description: String!
  perPerson: Int!
  paidBy: UserCreateOneWithoutExpensesPaidInput!
  participants: Expense_ShareCreateManyWithoutExpenseInput
  group: GroupCreateOneWithoutExpensesInput!
}

input ExpenseCreateManyWithoutGroupInput {
  create: [ExpenseCreateWithoutGroupInput!]
  connect: [ExpenseWhereUniqueInput!]
}

input ExpenseCreateManyWithoutPaidByInput {
  create: [ExpenseCreateWithoutPaidByInput!]
  connect: [ExpenseWhereUniqueInput!]
}

input ExpenseCreateOneWithoutParticipantsInput {
  create: ExpenseCreateWithoutParticipantsInput
  connect: ExpenseWhereUniqueInput
}

input ExpenseCreateWithoutGroupInput {
  amount: Int!
  description: String!
  perPerson: Int!
  paidBy: UserCreateOneWithoutExpensesPaidInput!
  participants: Expense_ShareCreateManyWithoutExpenseInput
}

input ExpenseCreateWithoutPaidByInput {
  amount: Int!
  description: String!
  perPerson: Int!
  participants: Expense_ShareCreateManyWithoutExpenseInput
  group: GroupCreateOneWithoutExpensesInput!
}

input ExpenseCreateWithoutParticipantsInput {
  amount: Int!
  description: String!
  perPerson: Int!
  paidBy: UserCreateOneWithoutExpensesPaidInput!
  group: GroupCreateOneWithoutExpensesInput!
}

type ExpenseEdge {
  node: Expense!
  cursor: String!
}

enum ExpenseOrderByInput {
  id_ASC
  id_DESC
  amount_ASC
  amount_DESC
  description_ASC
  description_DESC
  perPerson_ASC
  perPerson_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ExpensePreviousValues {
  id: ID!
  amount: Int!
  description: String!
  perPerson: Int!
}

type ExpenseSubscriptionPayload {
  mutation: MutationType!
  node: Expense
  updatedFields: [String!]
  previousValues: ExpensePreviousValues
}

input ExpenseSubscriptionWhereInput {
  AND: [ExpenseSubscriptionWhereInput!]
  OR: [ExpenseSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ExpenseWhereInput
}

input ExpenseUpdateInput {
  amount: Int
  description: String
  perPerson: Int
  paidBy: UserUpdateOneWithoutExpensesPaidInput
  participants: Expense_ShareUpdateManyWithoutExpenseInput
  group: GroupUpdateOneWithoutExpensesInput
}

input ExpenseUpdateManyWithoutGroupInput {
  create: [ExpenseCreateWithoutGroupInput!]
  connect: [ExpenseWhereUniqueInput!]
  disconnect: [ExpenseWhereUniqueInput!]
  delete: [ExpenseWhereUniqueInput!]
  update: [ExpenseUpdateWithoutGroupInput!]
  upsert: [ExpenseUpsertWithoutGroupInput!]
}

input ExpenseUpdateManyWithoutPaidByInput {
  create: [ExpenseCreateWithoutPaidByInput!]
  connect: [ExpenseWhereUniqueInput!]
  disconnect: [ExpenseWhereUniqueInput!]
  delete: [ExpenseWhereUniqueInput!]
  update: [ExpenseUpdateWithoutPaidByInput!]
  upsert: [ExpenseUpsertWithoutPaidByInput!]
}

input ExpenseUpdateOneWithoutParticipantsInput {
  create: ExpenseCreateWithoutParticipantsInput
  connect: ExpenseWhereUniqueInput
  disconnect: ExpenseWhereUniqueInput
  delete: ExpenseWhereUniqueInput
  update: ExpenseUpdateWithoutParticipantsInput
  upsert: ExpenseUpsertWithoutParticipantsInput
}

input ExpenseUpdateWithoutGroupDataInput {
  amount: Int
  description: String
  perPerson: Int
  paidBy: UserUpdateOneWithoutExpensesPaidInput
  participants: Expense_ShareUpdateManyWithoutExpenseInput
}

input ExpenseUpdateWithoutGroupInput {
  where: ExpenseWhereUniqueInput!
  data: ExpenseUpdateWithoutGroupDataInput!
}

input ExpenseUpdateWithoutPaidByDataInput {
  amount: Int
  description: String
  perPerson: Int
  participants: Expense_ShareUpdateManyWithoutExpenseInput
  group: GroupUpdateOneWithoutExpensesInput
}

input ExpenseUpdateWithoutPaidByInput {
  where: ExpenseWhereUniqueInput!
  data: ExpenseUpdateWithoutPaidByDataInput!
}

input ExpenseUpdateWithoutParticipantsDataInput {
  amount: Int
  description: String
  perPerson: Int
  paidBy: UserUpdateOneWithoutExpensesPaidInput
  group: GroupUpdateOneWithoutExpensesInput
}

input ExpenseUpdateWithoutParticipantsInput {
  where: ExpenseWhereUniqueInput!
  data: ExpenseUpdateWithoutParticipantsDataInput!
}

input ExpenseUpsertWithoutGroupInput {
  where: ExpenseWhereUniqueInput!
  update: ExpenseUpdateWithoutGroupDataInput!
  create: ExpenseCreateWithoutGroupInput!
}

input ExpenseUpsertWithoutPaidByInput {
  where: ExpenseWhereUniqueInput!
  update: ExpenseUpdateWithoutPaidByDataInput!
  create: ExpenseCreateWithoutPaidByInput!
}

input ExpenseUpsertWithoutParticipantsInput {
  where: ExpenseWhereUniqueInput!
  update: ExpenseUpdateWithoutParticipantsDataInput!
  create: ExpenseCreateWithoutParticipantsInput!
}

input ExpenseWhereInput {
  AND: [ExpenseWhereInput!]
  OR: [ExpenseWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  amount: Int
  amount_not: Int
  amount_in: [Int!]
  amount_not_in: [Int!]
  amount_lt: Int
  amount_lte: Int
  amount_gt: Int
  amount_gte: Int
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  perPerson: Int
  perPerson_not: Int
  perPerson_in: [Int!]
  perPerson_not_in: [Int!]
  perPerson_lt: Int
  perPerson_lte: Int
  perPerson_gt: Int
  perPerson_gte: Int
  paidBy: UserWhereInput
  participants_every: Expense_ShareWhereInput
  participants_some: Expense_ShareWhereInput
  participants_none: Expense_ShareWhereInput
  group: GroupWhereInput
}

input ExpenseWhereUniqueInput {
  id: ID
}

type GroupConnection {
  pageInfo: PageInfo!
  edges: [GroupEdge]!
  aggregate: AggregateGroup!
}

input GroupCreateInput {
  name: String!
  users: UserCreateManyWithoutGroupsInput
  createdBy: UserCreateOneWithoutGroupsCreatedInput!
  expenses: ExpenseCreateManyWithoutGroupInput
}

input GroupCreateManyWithoutCreatedByInput {
  create: [GroupCreateWithoutCreatedByInput!]
  connect: [GroupWhereUniqueInput!]
}

input GroupCreateManyWithoutUsersInput {
  create: [GroupCreateWithoutUsersInput!]
  connect: [GroupWhereUniqueInput!]
}

input GroupCreateOneWithoutExpensesInput {
  create: GroupCreateWithoutExpensesInput
  connect: GroupWhereUniqueInput
}

input GroupCreateWithoutCreatedByInput {
  name: String!
  users: UserCreateManyWithoutGroupsInput
  expenses: ExpenseCreateManyWithoutGroupInput
}

input GroupCreateWithoutExpensesInput {
  name: String!
  users: UserCreateManyWithoutGroupsInput
  createdBy: UserCreateOneWithoutGroupsCreatedInput!
}

input GroupCreateWithoutUsersInput {
  name: String!
  createdBy: UserCreateOneWithoutGroupsCreatedInput!
  expenses: ExpenseCreateManyWithoutGroupInput
}

type GroupEdge {
  node: Group!
  cursor: String!
}

enum GroupOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type GroupPreviousValues {
  id: ID!
  name: String!
}

type GroupSubscriptionPayload {
  mutation: MutationType!
  node: Group
  updatedFields: [String!]
  previousValues: GroupPreviousValues
}

input GroupSubscriptionWhereInput {
  AND: [GroupSubscriptionWhereInput!]
  OR: [GroupSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: GroupWhereInput
}

input GroupUpdateInput {
  name: String
  users: UserUpdateManyWithoutGroupsInput
  createdBy: UserUpdateOneWithoutGroupsCreatedInput
  expenses: ExpenseUpdateManyWithoutGroupInput
}

input GroupUpdateManyWithoutCreatedByInput {
  create: [GroupCreateWithoutCreatedByInput!]
  connect: [GroupWhereUniqueInput!]
  disconnect: [GroupWhereUniqueInput!]
  delete: [GroupWhereUniqueInput!]
  update: [GroupUpdateWithoutCreatedByInput!]
  upsert: [GroupUpsertWithoutCreatedByInput!]
}

input GroupUpdateManyWithoutUsersInput {
  create: [GroupCreateWithoutUsersInput!]
  connect: [GroupWhereUniqueInput!]
  disconnect: [GroupWhereUniqueInput!]
  delete: [GroupWhereUniqueInput!]
  update: [GroupUpdateWithoutUsersInput!]
  upsert: [GroupUpsertWithoutUsersInput!]
}

input GroupUpdateOneWithoutExpensesInput {
  create: GroupCreateWithoutExpensesInput
  connect: GroupWhereUniqueInput
  disconnect: GroupWhereUniqueInput
  delete: GroupWhereUniqueInput
  update: GroupUpdateWithoutExpensesInput
  upsert: GroupUpsertWithoutExpensesInput
}

input GroupUpdateWithoutCreatedByDataInput {
  name: String
  users: UserUpdateManyWithoutGroupsInput
  expenses: ExpenseUpdateManyWithoutGroupInput
}

input GroupUpdateWithoutCreatedByInput {
  where: GroupWhereUniqueInput!
  data: GroupUpdateWithoutCreatedByDataInput!
}

input GroupUpdateWithoutExpensesDataInput {
  name: String
  users: UserUpdateManyWithoutGroupsInput
  createdBy: UserUpdateOneWithoutGroupsCreatedInput
}

input GroupUpdateWithoutExpensesInput {
  where: GroupWhereUniqueInput!
  data: GroupUpdateWithoutExpensesDataInput!
}

input GroupUpdateWithoutUsersDataInput {
  name: String
  createdBy: UserUpdateOneWithoutGroupsCreatedInput
  expenses: ExpenseUpdateManyWithoutGroupInput
}

input GroupUpdateWithoutUsersInput {
  where: GroupWhereUniqueInput!
  data: GroupUpdateWithoutUsersDataInput!
}

input GroupUpsertWithoutCreatedByInput {
  where: GroupWhereUniqueInput!
  update: GroupUpdateWithoutCreatedByDataInput!
  create: GroupCreateWithoutCreatedByInput!
}

input GroupUpsertWithoutExpensesInput {
  where: GroupWhereUniqueInput!
  update: GroupUpdateWithoutExpensesDataInput!
  create: GroupCreateWithoutExpensesInput!
}

input GroupUpsertWithoutUsersInput {
  where: GroupWhereUniqueInput!
  update: GroupUpdateWithoutUsersDataInput!
  create: GroupCreateWithoutUsersInput!
}

input GroupWhereInput {
  AND: [GroupWhereInput!]
  OR: [GroupWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  users_every: UserWhereInput
  users_some: UserWhereInput
  users_none: UserWhereInput
  createdBy: UserWhereInput
  expenses_every: ExpenseWhereInput
  expenses_some: ExpenseWhereInput
  expenses_none: ExpenseWhereInput
}

input GroupWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createUser(data: UserCreateInput!): User!
  createGroup(data: GroupCreateInput!): Group!
  createExpense(data: ExpenseCreateInput!): Expense!
  createExpense_Share(data: Expense_ShareCreateInput!): Expense_Share!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateGroup(data: GroupUpdateInput!, where: GroupWhereUniqueInput!): Group
  updateExpense(data: ExpenseUpdateInput!, where: ExpenseWhereUniqueInput!): Expense
  deleteUser(where: UserWhereUniqueInput!): User
  deleteGroup(where: GroupWhereUniqueInput!): Group
  deleteExpense(where: ExpenseWhereUniqueInput!): Expense
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertGroup(where: GroupWhereUniqueInput!, create: GroupCreateInput!, update: GroupUpdateInput!): Group!
  upsertExpense(where: ExpenseWhereUniqueInput!, create: ExpenseCreateInput!, update: ExpenseUpdateInput!): Expense!
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput!): BatchPayload!
  updateManyGroups(data: GroupUpdateInput!, where: GroupWhereInput!): BatchPayload!
  updateManyExpenses(data: ExpenseUpdateInput!, where: ExpenseWhereInput!): BatchPayload!
  updateManyExpense_Shares(data: Expense_ShareUpdateInput!, where: Expense_ShareWhereInput!): BatchPayload!
  deleteManyUsers(where: UserWhereInput!): BatchPayload!
  deleteManyGroups(where: GroupWhereInput!): BatchPayload!
  deleteManyExpenses(where: ExpenseWhereInput!): BatchPayload!
  deleteManyExpense_Shares(where: Expense_ShareWhereInput!): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  groups(where: GroupWhereInput, orderBy: GroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Group]!
  expenses(where: ExpenseWhereInput, orderBy: ExpenseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Expense]!
  expense_Shares(where: Expense_ShareWhereInput, orderBy: Expense_ShareOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Expense_Share]!
  user(where: UserWhereUniqueInput!): User
  group(where: GroupWhereUniqueInput!): Group
  expense(where: ExpenseWhereUniqueInput!): Expense
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  groupsConnection(where: GroupWhereInput, orderBy: GroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): GroupConnection!
  expensesConnection(where: ExpenseWhereInput, orderBy: ExpenseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ExpenseConnection!
  expense_SharesConnection(where: Expense_ShareWhereInput, orderBy: Expense_ShareOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): Expense_ShareConnection!
  node(id: ID!): Node
}

type Subscription {
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  group(where: GroupSubscriptionWhereInput): GroupSubscriptionPayload
  expense(where: ExpenseSubscriptionWhereInput): ExpenseSubscriptionPayload
  expense_Share(where: Expense_ShareSubscriptionWhereInput): Expense_ShareSubscriptionPayload
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  name: String!
  email: String!
  password: String!
  groups: GroupCreateManyWithoutUsersInput
  groupsCreated: GroupCreateManyWithoutCreatedByInput
  expensesPaid: ExpenseCreateManyWithoutPaidByInput
  expensesShared: Expense_ShareCreateManyWithoutUserInput
}

input UserCreateManyWithoutGroupsInput {
  create: [UserCreateWithoutGroupsInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneWithoutExpensesPaidInput {
  create: UserCreateWithoutExpensesPaidInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutExpensesSharedInput {
  create: UserCreateWithoutExpensesSharedInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutGroupsCreatedInput {
  create: UserCreateWithoutGroupsCreatedInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutExpensesPaidInput {
  name: String!
  email: String!
  password: String!
  groups: GroupCreateManyWithoutUsersInput
  groupsCreated: GroupCreateManyWithoutCreatedByInput
  expensesShared: Expense_ShareCreateManyWithoutUserInput
}

input UserCreateWithoutExpensesSharedInput {
  name: String!
  email: String!
  password: String!
  groups: GroupCreateManyWithoutUsersInput
  groupsCreated: GroupCreateManyWithoutCreatedByInput
  expensesPaid: ExpenseCreateManyWithoutPaidByInput
}

input UserCreateWithoutGroupsCreatedInput {
  name: String!
  email: String!
  password: String!
  groups: GroupCreateManyWithoutUsersInput
  expensesPaid: ExpenseCreateManyWithoutPaidByInput
  expensesShared: Expense_ShareCreateManyWithoutUserInput
}

input UserCreateWithoutGroupsInput {
  name: String!
  email: String!
  password: String!
  groupsCreated: GroupCreateManyWithoutCreatedByInput
  expensesPaid: ExpenseCreateManyWithoutPaidByInput
  expensesShared: Expense_ShareCreateManyWithoutUserInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  email: String!
  password: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  groups: GroupUpdateManyWithoutUsersInput
  groupsCreated: GroupUpdateManyWithoutCreatedByInput
  expensesPaid: ExpenseUpdateManyWithoutPaidByInput
  expensesShared: Expense_ShareUpdateManyWithoutUserInput
}

input UserUpdateManyWithoutGroupsInput {
  create: [UserCreateWithoutGroupsInput!]
  connect: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithoutGroupsInput!]
  upsert: [UserUpsertWithoutGroupsInput!]
}

input UserUpdateOneWithoutExpensesPaidInput {
  create: UserCreateWithoutExpensesPaidInput
  connect: UserWhereUniqueInput
  disconnect: UserWhereUniqueInput
  delete: UserWhereUniqueInput
  update: UserUpdateWithoutExpensesPaidInput
  upsert: UserUpsertWithoutExpensesPaidInput
}

input UserUpdateOneWithoutExpensesSharedInput {
  create: UserCreateWithoutExpensesSharedInput
  connect: UserWhereUniqueInput
  disconnect: UserWhereUniqueInput
  delete: UserWhereUniqueInput
  update: UserUpdateWithoutExpensesSharedInput
  upsert: UserUpsertWithoutExpensesSharedInput
}

input UserUpdateOneWithoutGroupsCreatedInput {
  create: UserCreateWithoutGroupsCreatedInput
  connect: UserWhereUniqueInput
  disconnect: UserWhereUniqueInput
  delete: UserWhereUniqueInput
  update: UserUpdateWithoutGroupsCreatedInput
  upsert: UserUpsertWithoutGroupsCreatedInput
}

input UserUpdateWithoutExpensesPaidDataInput {
  name: String
  email: String
  password: String
  groups: GroupUpdateManyWithoutUsersInput
  groupsCreated: GroupUpdateManyWithoutCreatedByInput
  expensesShared: Expense_ShareUpdateManyWithoutUserInput
}

input UserUpdateWithoutExpensesPaidInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutExpensesPaidDataInput!
}

input UserUpdateWithoutExpensesSharedDataInput {
  name: String
  email: String
  password: String
  groups: GroupUpdateManyWithoutUsersInput
  groupsCreated: GroupUpdateManyWithoutCreatedByInput
  expensesPaid: ExpenseUpdateManyWithoutPaidByInput
}

input UserUpdateWithoutExpensesSharedInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutExpensesSharedDataInput!
}

input UserUpdateWithoutGroupsCreatedDataInput {
  name: String
  email: String
  password: String
  groups: GroupUpdateManyWithoutUsersInput
  expensesPaid: ExpenseUpdateManyWithoutPaidByInput
  expensesShared: Expense_ShareUpdateManyWithoutUserInput
}

input UserUpdateWithoutGroupsCreatedInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutGroupsCreatedDataInput!
}

input UserUpdateWithoutGroupsDataInput {
  name: String
  email: String
  password: String
  groupsCreated: GroupUpdateManyWithoutCreatedByInput
  expensesPaid: ExpenseUpdateManyWithoutPaidByInput
  expensesShared: Expense_ShareUpdateManyWithoutUserInput
}

input UserUpdateWithoutGroupsInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutGroupsDataInput!
}

input UserUpsertWithoutExpensesPaidInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutExpensesPaidDataInput!
  create: UserCreateWithoutExpensesPaidInput!
}

input UserUpsertWithoutExpensesSharedInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutExpensesSharedDataInput!
  create: UserCreateWithoutExpensesSharedInput!
}

input UserUpsertWithoutGroupsCreatedInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutGroupsCreatedDataInput!
  create: UserCreateWithoutGroupsCreatedInput!
}

input UserUpsertWithoutGroupsInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutGroupsDataInput!
  create: UserCreateWithoutGroupsInput!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  groups_every: GroupWhereInput
  groups_some: GroupWhereInput
  groups_none: GroupWhereInput
  groupsCreated_every: GroupWhereInput
  groupsCreated_some: GroupWhereInput
  groupsCreated_none: GroupWhereInput
  expensesPaid_every: ExpenseWhereInput
  expensesPaid_some: ExpenseWhereInput
  expensesPaid_none: ExpenseWhereInput
  expensesShared_every: Expense_ShareWhereInput
  expensesShared_some: Expense_ShareWhereInput
  expensesShared_none: Expense_ShareWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
